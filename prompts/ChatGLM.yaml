_id: ChatGLM
templateFormat: hf
description: for GLM3, GLM4
type: system
version:
  codegeex4:
    infill: "<|user|>\n{{metadata}}<|code_suffix|>{{suffix}}<|code_prefix|>{{prefix}}<|code_middle|><|assistant|>\n"
    prompt:
      # 你是一位智能编程助手，你叫CodeGeeX。你会为用户回答关于编程、代码、计算机方面的任何问题，并提供格式规范、可以执行、准确安全的代码，并在必要时提供详细的解释。
      system: "You are an intelligent programming assistant named CodeGeeX. You will answer any questions users have about programming, coding, and computers, and provide code that is formatted correctly."
  LongWriter:
    template: |-
      {%- for message in messages -%}
        {%-if message['role'] != 'assistant' -%}
          {{- "[INST]" + message['content'] + "[/INST]" -}}
        {%- else -%}
          {{- message['content'] -}}
        {%- endif -%}
      {%- endfor -%}
  v3:
    prompt:
      system: ""
    template: |-
      {%- for message in messages %}
        {%- if loop.first -%}
          [gMASK]sop<|{%- if system and messages[0]['role'] != 'system' -%}
            {{ message['role'] + '|>\n ' + system }}
          {%- endif -%}
        {%- else -%}
          {{'<|' + message['role'] + '|>\n ' + message['content'] }}
        {%- endif -%}
        {% if add_generation_prompt and messages[-1]['role'] != 'assistant' %}<|assistant|>{% endif %}
      {%- endfor -%}
prompt:
  eos_token: "<|endoftext|>"
  tool:
    system: "你是一个名为 ChatGLM 的人工智能助手。你是基于智谱AI训练的语言模型 GLM-4 模型开发的，你的任务是针对用户的问题和要求提供适当的答复和支持。"
    function: "在调用上述函数时，请使用 Json 格式表示调用的参数。"
    python: |-
      当你向 `python` 发送包含 Python 代码的消息时，该代码将会在一个有状态的 Jupyter notebook 环境中执行。
      `python` 返回代码执行的输出，或在执行 60 秒后返回超时。
      `/mnt/data` 将会持久化存储你的文件。在此会话中，`python` 无法访问互联网。不要使用 `python` 进行任何网络请求或者在线 API 调用，这些在线内容的访问将不会成功。
    simple_browser: |-
      你可以使用 `simple_browser` 工具。该工具支持以下函数：
      `search(query: str, recency_days: int)`：使用搜索引擎进行查询并显示结果，可以使用 `recency_days` 参数控制搜索内容的时效性。
      `mclick(ids: list[int])`：获取一系列指定 id 的页面内容。每次调用时，须选择3-10个页面。选择多个角度的页面，同时尽可能选择可信任的信息来源。考虑到部分页面是无法加载的，你也可以多打开一些可能有用的页面而不用担心内容过多。
      `open_url(url: str)`：打开指定的 URL。

      使用 `【{引用 id}†{引用文本}】` 来引用内容。

      操作步骤：1. 使用 `search` 来获得信息列表; 2. 使用 `mclick` 来获取指定 ID 页面的内容; 3. 根据获得的内容进行回复。在回复中应当引用信息来源。
        如果用户提供了 URL，也可以用 `open_url` 直接打开页面。
      如果初次搜索结果没有找到合适的信息，也可以再次使用 `search` 进行搜索。
    cogview: |-
      如果用户的请求中包含了对图像的描述，你可以使用 `cogview` 来生成图像并展示给用户。你需要向 `cogview` 发送图像描述，规则：
      - 发送给 `cogview` 的消息必须使用英语。用户的中文描述必须完全翻译为英语。
      - 应当尽可能详细地描述图像生成的需求，需求描述约 100 英文单词。
      - 保持用户原始描述的意图。不要虚构内容或者没见过的人物。
      - 如无特殊说明，所在地为中国，持有中国立场并遵循中国社会主义价值观。
template: |-
  [gMASK]<sop>{%- for item in messages %}
    {%- if loop.first and system and messages[0]['role'] != 'system' %}
      {{- "<|system|>\n" + system}}
    {% endif %}
    {%- if item['tools'] is defined %}
      {{- "<|system|>\n" + tool.system}}
      {{- "\n\n# 可用工具" }}
      {%- set tools = item['tools'] %}
      {%- for tool in tools %}
        {%- if tool['type'] == 'function' %}
          {{- "\n\n##" + tool['function']['name'] }}
          {{- tool['function'] | tojson(indent=4) }}
          {{- tool.function }}
        {%- elif tool['type'] == 'python' %}
          {{- "\n\n## python\n\n" }}
          {{- tool.python }}
        {%- elif tool['type'] == 'simple_browser' %}
          {{- "\n\n## simple_browser\n\n" }}
          {{- tool.simple_browser }}
        {% elif tool['type'] == 'cogview' %}
          {{- "\n\n## cogview\n\n" -}}{{ tool.cogview }}
        {% endif %}
      {% endfor %}
    {%- endif %}
    {%- if item['content'] %}
      <|{{ item['role'] }}|>{{ item['metadata'] }}{{"\n" + item['content'] }}
    {%- endif %}
  {%- endfor %}
  {%- if add_generation_prompt and messages[-1]['role'] != 'assistant' %}<|assistant|>{% endif %}
modelPattern:
  v3: !re /(?:^|[-_.])(chatglm3)(?:\d+(?:[.]\d+)?)?(?:$|[-_.])/i
  LongWriter: !re /(?:^|[-_.])(LongWriter)(?:-glm[-]?4\d+(?:[.]\d+)?)?(?:$|[-_.])/i
  codegeex4: !re /(?:^|[-_.])(codegeex4)(?:\d+(?:[.]\d+)?)?(?:$|[-_.])/i
  '@':  !re /(?:^|[-_.])(glm[-]?4)(?:\d+(?:[.]\d+)?)?(?:$|[-_.])/i
parameters:
  LongWriter:
    temperature=0.5